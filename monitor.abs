module Monitor;

export *;
import * from Architecture;
import * from Param;
import * from ScaleWrapper;

interface MonitorInterface {}

class Monitor(PrometheusInterface prometheus, String serviceName, WrapperInterface wrapper, Int baseN) implements MonitorInterface {
    Rat time = monitoring_window()/time_unit_to_sec();
    Rat monitored_inst = baseN;

    Unit run() {
        while(time <= simulation_duration()) {
            await duration(monitoring_window());
            Rat latency = await prometheus!getV("latency", serviceName);
            Rat total_req = await prometheus!getV("total request", serviceName);
            Rat loss = await prometheus!getV("request loss", serviceName);
            Rat completed = await prometheus!getV("completed", serviceName);
            Rat instances = await prometheus!getV("instances", serviceName);
            Rat waiting = await prometheus!getV("waiting", serviceName);
            Rat avg_lat = 0;
            Rat inbound_workload = time_unit_to_sec() * total_req / monitoring_window();
            Rat mcl = lookupUnsafe(serviceMCLs(), serviceName);
            Rat supp = mcl * instances;
            if(completed != 0) avg_lat = latency/completed;
            if ((inbound_workload + k_big()) - supp > k() || supp - (inbound_workload + k_big()) > k()) {
                inbound_workload = inbound_workload + k_big();
                Int target = ceil(float(inbound_workload/mcl));
                if(target > instances) this!scaleUp(target - instances);
                else if(target < instances) this!scaleDown(instances - target); 
            }
            // println(serviceName + "[Time: " + toString(time) + " Latency: " + toString(float(avg_lat)) + "s Instances: " + toString(instances) +"]");// + " Request Throughput: " + toString(float(inbound_workload)) +  " Waiting: " + toString(float(waiting)) + " Completed: " + toString(float(completed)) + " Loss: " + toString(float(loss)) + "]");
            time = time + (monitoring_window()/time_unit_to_sec());      
        }
    }

    Unit scaleUp(Rat toDeploy) {
        while(toDeploy != 0) {
            wrapper!deploy();
            toDeploy = toDeploy - 1;
        }
    }

    Unit scaleDown(Rat toDeploy) {
        while(toDeploy != 0) {
            wrapper!undeploy();
            toDeploy = toDeploy - 1;
        }
    }
}