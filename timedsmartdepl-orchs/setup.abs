module Setup;
export *;
import * from ABS.DC;
import * from Architecture;

interface Setup{
	List<UpdateProfileLoadBalancerInterface> getUpdateProfileLoadBalancerInterface();
	List<BookFlightsInterface> getBookFlightsInterface();
	List<ValidateIdInterface> getValidateIdInterface();
	List<AuthLoadBalancerInterface> getAuthLoadBalancerInterface();
	List<UpdateMilesLoadBalancerInterface> getUpdateMilesLoadBalancerInterface();
	List<ValidateIdLoadBalancerInterface> getValidateIdLoadBalancerInterface();
	List<CancelBookingLoadBalancerInterface> getCancelBookingLoadBalancerInterface();
	List<BookFlightsLoadBalancerInterface> getBookFlightsLoadBalancerInterface();
	List<CancelBookingInterface> getCancelBookingInterface();
	List<GetRewardMilesLoadBalancerInterface> getGetRewardMilesLoadBalancerInterface();
	List<QueryFlightsLoadBalancerInterface> getQueryFlightsLoadBalancerInterface();
	List<GetRewardMilesInterface> getGetRewardMilesInterface();
	List<ViewProfileInterface> getViewProfileInterface();
	List<AuthInterface> getAuthInterface();
	List<QueryFlightsInterface> getQueryFlightsInterface();
	List<UpdateMilesInterface> getUpdateMilesInterface();
	List<ViewProfileLoadBalancerInterface> getViewProfileLoadBalancerInterface();
	List<UpdateProfileInterface> getUpdateProfileInterface();
	List<DeploymentComponent> getDeploymentComponent();
	Unit deploy();
	Unit undeploy();
}

class Setup(CloudProvider cloudProvider, PrometheusInterface prometheus) implements Setup{

	List<List<UpdateProfileLoadBalancerInterface>> ls_ls_UpdateProfileLoadBalancerInterface = Nil;
	List<UpdateProfileLoadBalancerInterface> ls_UpdateProfileLoadBalancerInterface = Nil;
	List<List<BookFlightsInterface>> ls_ls_BookFlightsInterface = Nil;
	List<BookFlightsInterface> ls_BookFlightsInterface = Nil;
	List<List<ValidateIdInterface>> ls_ls_ValidateIdInterface = Nil;
	List<ValidateIdInterface> ls_ValidateIdInterface = Nil;
	List<List<AuthLoadBalancerInterface>> ls_ls_AuthLoadBalancerInterface = Nil;
	List<AuthLoadBalancerInterface> ls_AuthLoadBalancerInterface = Nil;
	List<List<UpdateMilesLoadBalancerInterface>> ls_ls_UpdateMilesLoadBalancerInterface = Nil;
	List<UpdateMilesLoadBalancerInterface> ls_UpdateMilesLoadBalancerInterface = Nil;
	List<List<ValidateIdLoadBalancerInterface>> ls_ls_ValidateIdLoadBalancerInterface = Nil;
	List<ValidateIdLoadBalancerInterface> ls_ValidateIdLoadBalancerInterface = Nil;
	List<List<CancelBookingLoadBalancerInterface>> ls_ls_CancelBookingLoadBalancerInterface = Nil;
	List<CancelBookingLoadBalancerInterface> ls_CancelBookingLoadBalancerInterface = Nil;
	List<List<BookFlightsLoadBalancerInterface>> ls_ls_BookFlightsLoadBalancerInterface = Nil;
	List<BookFlightsLoadBalancerInterface> ls_BookFlightsLoadBalancerInterface = Nil;
	List<List<CancelBookingInterface>> ls_ls_CancelBookingInterface = Nil;
	List<CancelBookingInterface> ls_CancelBookingInterface = Nil;
	List<List<GetRewardMilesLoadBalancerInterface>> ls_ls_GetRewardMilesLoadBalancerInterface = Nil;
	List<GetRewardMilesLoadBalancerInterface> ls_GetRewardMilesLoadBalancerInterface = Nil;
	List<List<QueryFlightsLoadBalancerInterface>> ls_ls_QueryFlightsLoadBalancerInterface = Nil;
	List<QueryFlightsLoadBalancerInterface> ls_QueryFlightsLoadBalancerInterface = Nil;
	List<List<GetRewardMilesInterface>> ls_ls_GetRewardMilesInterface = Nil;
	List<GetRewardMilesInterface> ls_GetRewardMilesInterface = Nil;
	List<List<ViewProfileInterface>> ls_ls_ViewProfileInterface = Nil;
	List<ViewProfileInterface> ls_ViewProfileInterface = Nil;
	List<List<AuthInterface>> ls_ls_AuthInterface = Nil;
	List<AuthInterface> ls_AuthInterface = Nil;
	List<List<QueryFlightsInterface>> ls_ls_QueryFlightsInterface = Nil;
	List<QueryFlightsInterface> ls_QueryFlightsInterface = Nil;
	List<List<UpdateMilesInterface>> ls_ls_UpdateMilesInterface = Nil;
	List<UpdateMilesInterface> ls_UpdateMilesInterface = Nil;
	List<List<ViewProfileLoadBalancerInterface>> ls_ls_ViewProfileLoadBalancerInterface = Nil;
	List<ViewProfileLoadBalancerInterface> ls_ViewProfileLoadBalancerInterface = Nil;
	List<List<UpdateProfileInterface>> ls_ls_UpdateProfileInterface = Nil;
	List<UpdateProfileInterface> ls_UpdateProfileInterface = Nil;
	List<List<DeploymentComponent>> ls_ls_DeploymentComponent = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;
	Rat waiting_time = 10;
	{
		cloudProvider.addInstanceDescription(Pair("c4_4xlarge",
			map[Pair(CostPerInterval,796)
			,Pair(PaymentInterval,1)
			,Pair(Bandwidth,2000)
			,Pair(Memory,3000)
			,Pair(Cores,16000)
			,Pair(Speed,80000)
			]));
		cloudProvider.addInstanceDescription(Pair("c4_xlarge",
			map[Pair(CostPerInterval,199)
			,Pair(PaymentInterval,1)
			,Pair(Bandwidth,750)
			,Pair(Memory,750)
			,Pair(Cores,4000)
			,Pair(Speed,20000)
			]));
		cloudProvider.addInstanceDescription(Pair("c4_large",
			map[Pair(CostPerInterval,100)
			,Pair(PaymentInterval,1)
			,Pair(Bandwidth,500)
			,Pair(Memory,375)
			,Pair(Cores,2000)
			,Pair(Speed,10000)
			]));
		cloudProvider.addInstanceDescription(Pair("c4_2xlarge",
			map[Pair(CostPerInterval,398)
			,Pair(PaymentInterval,1)
			,Pair(Bandwidth,1000)
			,Pair(Memory,1500)
			,Pair(Cores,8000)
			,Pair(Speed,40000)
			]));
	}

	List<UpdateProfileLoadBalancerInterface> getUpdateProfileLoadBalancerInterface() { return ls_UpdateProfileLoadBalancerInterface; }
	List<BookFlightsInterface> getBookFlightsInterface() { return ls_BookFlightsInterface; }
	List<ValidateIdInterface> getValidateIdInterface() { return ls_ValidateIdInterface; }
	List<AuthLoadBalancerInterface> getAuthLoadBalancerInterface() { return ls_AuthLoadBalancerInterface; }
	List<UpdateMilesLoadBalancerInterface> getUpdateMilesLoadBalancerInterface() { return ls_UpdateMilesLoadBalancerInterface; }
	List<ValidateIdLoadBalancerInterface> getValidateIdLoadBalancerInterface() { return ls_ValidateIdLoadBalancerInterface; }
	List<CancelBookingLoadBalancerInterface> getCancelBookingLoadBalancerInterface() { return ls_CancelBookingLoadBalancerInterface; }
	List<BookFlightsLoadBalancerInterface> getBookFlightsLoadBalancerInterface() { return ls_BookFlightsLoadBalancerInterface; }
	List<CancelBookingInterface> getCancelBookingInterface() { return ls_CancelBookingInterface; }
	List<GetRewardMilesLoadBalancerInterface> getGetRewardMilesLoadBalancerInterface() { return ls_GetRewardMilesLoadBalancerInterface; }
	List<QueryFlightsLoadBalancerInterface> getQueryFlightsLoadBalancerInterface() { return ls_QueryFlightsLoadBalancerInterface; }
	List<GetRewardMilesInterface> getGetRewardMilesInterface() { return ls_GetRewardMilesInterface; }
	List<ViewProfileInterface> getViewProfileInterface() { return ls_ViewProfileInterface; }
	List<AuthInterface> getAuthInterface() { return ls_AuthInterface; }
	List<QueryFlightsInterface> getQueryFlightsInterface() { return ls_QueryFlightsInterface; }
	List<UpdateMilesInterface> getUpdateMilesInterface() { return ls_UpdateMilesInterface; }
	List<ViewProfileLoadBalancerInterface> getViewProfileLoadBalancerInterface() { return ls_ViewProfileLoadBalancerInterface; }
	List<UpdateProfileInterface> getUpdateProfileInterface() { return ls_UpdateProfileInterface; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		ls_ls_UpdateProfileLoadBalancerInterface = Cons(ls_UpdateProfileLoadBalancerInterface,ls_ls_UpdateProfileLoadBalancerInterface);
		ls_UpdateProfileLoadBalancerInterface = Nil;
		ls_ls_BookFlightsInterface = Cons(ls_BookFlightsInterface,ls_ls_BookFlightsInterface);
		ls_BookFlightsInterface = Nil;
		ls_ls_ValidateIdInterface = Cons(ls_ValidateIdInterface,ls_ls_ValidateIdInterface);
		ls_ValidateIdInterface = Nil;
		ls_ls_AuthLoadBalancerInterface = Cons(ls_AuthLoadBalancerInterface,ls_ls_AuthLoadBalancerInterface);
		ls_AuthLoadBalancerInterface = Nil;
		ls_ls_UpdateMilesLoadBalancerInterface = Cons(ls_UpdateMilesLoadBalancerInterface,ls_ls_UpdateMilesLoadBalancerInterface);
		ls_UpdateMilesLoadBalancerInterface = Nil;
		ls_ls_ValidateIdLoadBalancerInterface = Cons(ls_ValidateIdLoadBalancerInterface,ls_ls_ValidateIdLoadBalancerInterface);
		ls_ValidateIdLoadBalancerInterface = Nil;
		ls_ls_CancelBookingLoadBalancerInterface = Cons(ls_CancelBookingLoadBalancerInterface,ls_ls_CancelBookingLoadBalancerInterface);
		ls_CancelBookingLoadBalancerInterface = Nil;
		ls_ls_BookFlightsLoadBalancerInterface = Cons(ls_BookFlightsLoadBalancerInterface,ls_ls_BookFlightsLoadBalancerInterface);
		ls_BookFlightsLoadBalancerInterface = Nil;
		ls_ls_CancelBookingInterface = Cons(ls_CancelBookingInterface,ls_ls_CancelBookingInterface);
		ls_CancelBookingInterface = Nil;
		ls_ls_GetRewardMilesLoadBalancerInterface = Cons(ls_GetRewardMilesLoadBalancerInterface,ls_ls_GetRewardMilesLoadBalancerInterface);
		ls_GetRewardMilesLoadBalancerInterface = Nil;
		ls_ls_QueryFlightsLoadBalancerInterface = Cons(ls_QueryFlightsLoadBalancerInterface,ls_ls_QueryFlightsLoadBalancerInterface);
		ls_QueryFlightsLoadBalancerInterface = Nil;
		ls_ls_GetRewardMilesInterface = Cons(ls_GetRewardMilesInterface,ls_ls_GetRewardMilesInterface);
		ls_GetRewardMilesInterface = Nil;
		ls_ls_ViewProfileInterface = Cons(ls_ViewProfileInterface,ls_ls_ViewProfileInterface);
		ls_ViewProfileInterface = Nil;
		ls_ls_AuthInterface = Cons(ls_AuthInterface,ls_ls_AuthInterface);
		ls_AuthInterface = Nil;
		ls_ls_QueryFlightsInterface = Cons(ls_QueryFlightsInterface,ls_ls_QueryFlightsInterface);
		ls_QueryFlightsInterface = Nil;
		ls_ls_UpdateMilesInterface = Cons(ls_UpdateMilesInterface,ls_ls_UpdateMilesInterface);
		ls_UpdateMilesInterface = Nil;
		ls_ls_ViewProfileLoadBalancerInterface = Cons(ls_ViewProfileLoadBalancerInterface,ls_ls_ViewProfileLoadBalancerInterface);
		ls_ViewProfileLoadBalancerInterface = Nil;
		ls_ls_UpdateProfileInterface = Cons(ls_UpdateProfileInterface,ls_ls_UpdateProfileInterface);
		ls_UpdateProfileInterface = Nil;
		ls_ls_DeploymentComponent = Cons(ls_DeploymentComponent,ls_ls_DeploymentComponent);
		ls_DeploymentComponent = Nil;
		this.deploy_aux();
	}

	Unit undeploy() {
		if (ls_ls_DeploymentComponent != Nil) {
			this.undeploy_aux();
			ls_DeploymentComponent = head(ls_ls_DeploymentComponent);
			ls_ls_DeploymentComponent = tail(ls_ls_DeploymentComponent);
				ls_UpdateProfileLoadBalancerInterface = head(ls_ls_UpdateProfileLoadBalancerInterface);
				ls_BookFlightsInterface = head(ls_ls_BookFlightsInterface);
				ls_ValidateIdInterface = head(ls_ls_ValidateIdInterface);
				ls_AuthLoadBalancerInterface = head(ls_ls_AuthLoadBalancerInterface);
				ls_UpdateMilesLoadBalancerInterface = head(ls_ls_UpdateMilesLoadBalancerInterface);
				ls_ValidateIdLoadBalancerInterface = head(ls_ls_ValidateIdLoadBalancerInterface);
				ls_CancelBookingLoadBalancerInterface = head(ls_ls_CancelBookingLoadBalancerInterface);
				ls_BookFlightsLoadBalancerInterface = head(ls_ls_BookFlightsLoadBalancerInterface);
				ls_CancelBookingInterface = head(ls_ls_CancelBookingInterface);
				ls_GetRewardMilesLoadBalancerInterface = head(ls_ls_GetRewardMilesLoadBalancerInterface);
				ls_QueryFlightsLoadBalancerInterface = head(ls_ls_QueryFlightsLoadBalancerInterface);
				ls_GetRewardMilesInterface = head(ls_ls_GetRewardMilesInterface);
				ls_ViewProfileInterface = head(ls_ls_ViewProfileInterface);
				ls_AuthInterface = head(ls_ls_AuthInterface);
				ls_QueryFlightsInterface = head(ls_ls_QueryFlightsInterface);
				ls_UpdateMilesInterface = head(ls_ls_UpdateMilesInterface);
				ls_ViewProfileLoadBalancerInterface = head(ls_ls_ViewProfileLoadBalancerInterface);
				ls_UpdateProfileInterface = head(ls_ls_UpdateProfileInterface);
			ls_ls_UpdateProfileLoadBalancerInterface = tail(ls_ls_UpdateProfileLoadBalancerInterface);
			ls_ls_BookFlightsInterface = tail(ls_ls_BookFlightsInterface);
			ls_ls_ValidateIdInterface = tail(ls_ls_ValidateIdInterface);
			ls_ls_AuthLoadBalancerInterface = tail(ls_ls_AuthLoadBalancerInterface);
			ls_ls_UpdateMilesLoadBalancerInterface = tail(ls_ls_UpdateMilesLoadBalancerInterface);
			ls_ls_ValidateIdLoadBalancerInterface = tail(ls_ls_ValidateIdLoadBalancerInterface);
			ls_ls_CancelBookingLoadBalancerInterface = tail(ls_ls_CancelBookingLoadBalancerInterface);
			ls_ls_BookFlightsLoadBalancerInterface = tail(ls_ls_BookFlightsLoadBalancerInterface);
			ls_ls_CancelBookingInterface = tail(ls_ls_CancelBookingInterface);
			ls_ls_GetRewardMilesLoadBalancerInterface = tail(ls_ls_GetRewardMilesLoadBalancerInterface);
			ls_ls_QueryFlightsLoadBalancerInterface = tail(ls_ls_QueryFlightsLoadBalancerInterface);
			ls_ls_GetRewardMilesInterface = tail(ls_ls_GetRewardMilesInterface);
			ls_ls_ViewProfileInterface = tail(ls_ls_ViewProfileInterface);
			ls_ls_AuthInterface = tail(ls_ls_AuthInterface);
			ls_ls_QueryFlightsInterface = tail(ls_ls_QueryFlightsInterface);
			ls_ls_UpdateMilesInterface = tail(ls_ls_UpdateMilesInterface);
			ls_ls_ViewProfileLoadBalancerInterface = tail(ls_ls_ViewProfileLoadBalancerInterface);
			ls_ls_UpdateProfileInterface = tail(ls_ls_UpdateProfileInterface);
		}
	}


	Unit deploy_aux() {
		Map<DeploymentComponent,Rat> speedPatchMap = map[];
		DeploymentComponent c4_4xlarge_0 = cloudProvider.launchInstanceNamed("c4_4xlarge");
		ls_DeploymentComponent = Cons(c4_4xlarge_0,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_4xlarge_0,0);
		DeploymentComponent c4_xlarge_1 = cloudProvider.launchInstanceNamed("c4_xlarge");
		ls_DeploymentComponent = Cons(c4_xlarge_1,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_xlarge_1,0);
		DeploymentComponent c4_xlarge_0 = cloudProvider.launchInstanceNamed("c4_xlarge");
		ls_DeploymentComponent = Cons(c4_xlarge_0,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_xlarge_0,0);
		DeploymentComponent c4_large_1 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_1,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_1,0);
		DeploymentComponent c4_large_0 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_0,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_0,0);
		DeploymentComponent c4_large_3 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_3,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_3,0);
		DeploymentComponent c4_large_2 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_2,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_2,0);
		DeploymentComponent c4_large_5 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_5,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_5,0);
		DeploymentComponent c4_large_4 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_4,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_4,0);
		DeploymentComponent c4_large_7 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_7,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_7,0);
		DeploymentComponent c4_large_6 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_6,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_6,0);
		DeploymentComponent c4_large_9 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_9,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_9,0);
		DeploymentComponent c4_large_8 = cloudProvider.launchInstanceNamed("c4_large");
		ls_DeploymentComponent = Cons(c4_large_8,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_large_8,0);
		DeploymentComponent c4_2xlarge_0 = cloudProvider.launchInstanceNamed("c4_2xlarge");
		ls_DeploymentComponent = Cons(c4_2xlarge_0,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_2xlarge_0,0);
		[DC: c4_large_7] UpdateMilesLoadBalancerInterface odefault___UpdateMilesLoadBalancer_0_c4_large_7 = new UpdateMilesLoadBalancer(prometheus);
		Rat coreRequired_odefault___UpdateMilesLoadBalancer_0_c4_large_7 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_7, fromJust(lookup(speedPatchMap,c4_large_7)) + coreRequired_odefault___UpdateMilesLoadBalancer_0_c4_large_7);
		ls_UpdateMilesLoadBalancerInterface = Cons(odefault___UpdateMilesLoadBalancer_0_c4_large_7, ls_UpdateMilesLoadBalancerInterface);
		[DC: c4_large_3] CancelBookingLoadBalancerInterface odefault___CancelBookingLoadBalancer_0_c4_large_3 = new CancelBookingLoadBalancer(prometheus);
		Rat coreRequired_odefault___CancelBookingLoadBalancer_0_c4_large_3 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_3, fromJust(lookup(speedPatchMap,c4_large_3)) + coreRequired_odefault___CancelBookingLoadBalancer_0_c4_large_3);
		ls_CancelBookingLoadBalancerInterface = Cons(odefault___CancelBookingLoadBalancer_0_c4_large_3, ls_CancelBookingLoadBalancerInterface);
		[DC: c4_large_6] GetRewardMilesLoadBalancerInterface odefault___GetRewardMilesLoadBalancer_0_c4_large_6 = new GetRewardMilesLoadBalancer(prometheus);
		Rat coreRequired_odefault___GetRewardMilesLoadBalancer_0_c4_large_6 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_6, fromJust(lookup(speedPatchMap,c4_large_6)) + coreRequired_odefault___GetRewardMilesLoadBalancer_0_c4_large_6);
		ls_GetRewardMilesLoadBalancerInterface = Cons(odefault___GetRewardMilesLoadBalancer_0_c4_large_6, ls_GetRewardMilesLoadBalancerInterface);
		[DC: c4_large_4] BookFlightsLoadBalancerInterface odefault___BookFlightsLoadBalancer_0_c4_large_4 = new BookFlightsLoadBalancer(prometheus);
		Rat coreRequired_odefault___BookFlightsLoadBalancer_0_c4_large_4 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_4, fromJust(lookup(speedPatchMap,c4_large_4)) + coreRequired_odefault___BookFlightsLoadBalancer_0_c4_large_4);
		ls_BookFlightsLoadBalancerInterface = Cons(odefault___BookFlightsLoadBalancer_0_c4_large_4, ls_BookFlightsLoadBalancerInterface);
		[DC: c4_large_1] UpdateProfileLoadBalancerInterface odefault___UpdateProfileLoadBalancer_0_c4_large_1 = new UpdateProfileLoadBalancer(prometheus);
		Rat coreRequired_odefault___UpdateProfileLoadBalancer_0_c4_large_1 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_1, fromJust(lookup(speedPatchMap,c4_large_1)) + coreRequired_odefault___UpdateProfileLoadBalancer_0_c4_large_1);
		ls_UpdateProfileLoadBalancerInterface = Cons(odefault___UpdateProfileLoadBalancer_0_c4_large_1, ls_UpdateProfileLoadBalancerInterface);
		[DC: c4_large_8] ValidateIdLoadBalancerInterface odefault___ValidateIdLoadBalancer_0_c4_large_8 = new ValidateIdLoadBalancer(prometheus);
		Rat coreRequired_odefault___ValidateIdLoadBalancer_0_c4_large_8 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_8, fromJust(lookup(speedPatchMap,c4_large_8)) + coreRequired_odefault___ValidateIdLoadBalancer_0_c4_large_8);
		ls_ValidateIdLoadBalancerInterface = Cons(odefault___ValidateIdLoadBalancer_0_c4_large_8, ls_ValidateIdLoadBalancerInterface);
		[DC: c4_large_9] QueryFlightsLoadBalancerInterface odefault___QueryFlightsLoadBalancer_0_c4_large_9 = new QueryFlightsLoadBalancer(prometheus);
		Rat coreRequired_odefault___QueryFlightsLoadBalancer_0_c4_large_9 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_9, fromJust(lookup(speedPatchMap,c4_large_9)) + coreRequired_odefault___QueryFlightsLoadBalancer_0_c4_large_9);
		ls_QueryFlightsLoadBalancerInterface = Cons(odefault___QueryFlightsLoadBalancer_0_c4_large_9, ls_QueryFlightsLoadBalancerInterface);
		[DC: c4_large_0] ViewProfileLoadBalancerInterface odefault___ViewProfileLoadBalancer_0_c4_large_0 = new ViewProfileLoadBalancer(prometheus);
		Rat coreRequired_odefault___ViewProfileLoadBalancer_0_c4_large_0 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_0, fromJust(lookup(speedPatchMap,c4_large_0)) + coreRequired_odefault___ViewProfileLoadBalancer_0_c4_large_0);
		ls_ViewProfileLoadBalancerInterface = Cons(odefault___ViewProfileLoadBalancer_0_c4_large_0, ls_ViewProfileLoadBalancerInterface);
		[DC: c4_large_5] AuthLoadBalancerInterface odefault___AuthLoadBalancer_0_c4_large_5 = new AuthLoadBalancer(prometheus);
		Rat coreRequired_odefault___AuthLoadBalancer_0_c4_large_5 = 100;
		speedPatchMap = put(speedPatchMap, c4_large_5, fromJust(lookup(speedPatchMap,c4_large_5)) + coreRequired_odefault___AuthLoadBalancer_0_c4_large_5);
		ls_AuthLoadBalancerInterface = Cons(odefault___AuthLoadBalancer_0_c4_large_5, ls_AuthLoadBalancerInterface);
		[DC: c4_2xlarge_0] UpdateProfileInterface odefault___UpdateProfile_0_c4_2xlarge_0 = new UpdateProfile(prometheus, odefault___UpdateProfileLoadBalancer_0_c4_large_1);
		Rat coreRequired_odefault___UpdateProfile_0_c4_2xlarge_0 = 2734;
		speedPatchMap = put(speedPatchMap, c4_2xlarge_0, fromJust(lookup(speedPatchMap,c4_2xlarge_0)) + coreRequired_odefault___UpdateProfile_0_c4_2xlarge_0);
		ls_UpdateProfileInterface = Cons(odefault___UpdateProfile_0_c4_2xlarge_0, ls_UpdateProfileInterface);
		[DC: c4_2xlarge_0] CancelBookingInterface odefault___CancelBooking_0_c4_2xlarge_0 = new CancelBooking(prometheus, odefault___GetRewardMilesLoadBalancer_0_c4_large_6, odefault___UpdateMilesLoadBalancer_0_c4_large_7, odefault___CancelBookingLoadBalancer_0_c4_large_3);
		Rat coreRequired_odefault___CancelBooking_0_c4_2xlarge_0 = 2032;
		speedPatchMap = put(speedPatchMap, c4_2xlarge_0, fromJust(lookup(speedPatchMap,c4_2xlarge_0)) + coreRequired_odefault___CancelBooking_0_c4_2xlarge_0);
		ls_CancelBookingInterface = Cons(odefault___CancelBooking_0_c4_2xlarge_0, ls_CancelBookingInterface);
		[DC: c4_large_2] ValidateIdInterface odefault___ValidateId_0_c4_large_2 = new ValidateId(prometheus, odefault___ValidateIdLoadBalancer_0_c4_large_8);
		Rat coreRequired_odefault___ValidateId_0_c4_large_2 = 1877;
		speedPatchMap = put(speedPatchMap, c4_large_2, fromJust(lookup(speedPatchMap,c4_large_2)) + coreRequired_odefault___ValidateId_0_c4_large_2);
		ls_ValidateIdInterface = Cons(odefault___ValidateId_0_c4_large_2, ls_ValidateIdInterface);
		[DC: c4_4xlarge_0] UpdateMilesInterface odefault___UpdateMiles_0_c4_4xlarge_0 = new UpdateMiles(prometheus, odefault___UpdateMilesLoadBalancer_0_c4_large_7);
		Rat coreRequired_odefault___UpdateMiles_0_c4_4xlarge_0 = 5096;
		speedPatchMap = put(speedPatchMap, c4_4xlarge_0, fromJust(lookup(speedPatchMap,c4_4xlarge_0)) + coreRequired_odefault___UpdateMiles_0_c4_4xlarge_0);
		ls_UpdateMilesInterface = Cons(odefault___UpdateMiles_0_c4_4xlarge_0, ls_UpdateMilesInterface);
		[DC: c4_4xlarge_0] QueryFlightsInterface odefault___QueryFlights_0_c4_4xlarge_0 = new QueryFlights(prometheus, odefault___QueryFlightsLoadBalancer_0_c4_large_9);
		Rat coreRequired_odefault___QueryFlights_0_c4_4xlarge_0 = 6498;
		speedPatchMap = put(speedPatchMap, c4_4xlarge_0, fromJust(lookup(speedPatchMap,c4_4xlarge_0)) + coreRequired_odefault___QueryFlights_0_c4_4xlarge_0);
		ls_QueryFlightsInterface = Cons(odefault___QueryFlights_0_c4_4xlarge_0, ls_QueryFlightsInterface);
		[DC: c4_2xlarge_0] BookFlightsInterface odefault___BookFlights_0_c4_2xlarge_0 = new BookFlights(prometheus, odefault___GetRewardMilesLoadBalancer_0_c4_large_6, odefault___UpdateMilesLoadBalancer_0_c4_large_7, odefault___BookFlightsLoadBalancer_0_c4_large_4);
		Rat coreRequired_odefault___BookFlights_0_c4_2xlarge_0 = 3155;
		speedPatchMap = put(speedPatchMap, c4_2xlarge_0, fromJust(lookup(speedPatchMap,c4_2xlarge_0)) + coreRequired_odefault___BookFlights_0_c4_2xlarge_0);
		ls_BookFlightsInterface = Cons(odefault___BookFlights_0_c4_2xlarge_0, ls_BookFlightsInterface);
		[DC: c4_xlarge_1] AuthInterface odefault___Auth_0_c4_xlarge_1 = new Auth(prometheus, odefault___ValidateIdLoadBalancer_0_c4_large_8, odefault___AuthLoadBalancer_0_c4_large_5);
		Rat coreRequired_odefault___Auth_0_c4_xlarge_1 = 3650;
		speedPatchMap = put(speedPatchMap, c4_xlarge_1, fromJust(lookup(speedPatchMap,c4_xlarge_1)) + coreRequired_odefault___Auth_0_c4_xlarge_1);
		ls_AuthInterface = Cons(odefault___Auth_0_c4_xlarge_1, ls_AuthInterface);
		[DC: c4_4xlarge_0] GetRewardMilesInterface odefault___GetRewardMiles_0_c4_4xlarge_0 = new GetRewardMiles(prometheus, odefault___GetRewardMilesLoadBalancer_0_c4_large_6);
		Rat coreRequired_odefault___GetRewardMiles_0_c4_4xlarge_0 = 4380;
		speedPatchMap = put(speedPatchMap, c4_4xlarge_0, fromJust(lookup(speedPatchMap,c4_4xlarge_0)) + coreRequired_odefault___GetRewardMiles_0_c4_4xlarge_0);
		ls_GetRewardMilesInterface = Cons(odefault___GetRewardMiles_0_c4_4xlarge_0, ls_GetRewardMilesInterface);
		[DC: c4_xlarge_0] ViewProfileInterface odefault___ViewProfile_0_c4_xlarge_0 = new ViewProfile(prometheus, odefault___ViewProfileLoadBalancer_0_c4_large_0);
		Rat coreRequired_odefault___ViewProfile_0_c4_xlarge_0 = 3582;
		speedPatchMap = put(speedPatchMap, c4_xlarge_0, fromJust(lookup(speedPatchMap,c4_xlarge_0)) + coreRequired_odefault___ViewProfile_0_c4_xlarge_0);
		ls_ViewProfileInterface = Cons(odefault___ViewProfile_0_c4_xlarge_0, ls_ViewProfileInterface);
		this!patchSpeed(speedPatchMap);
		await duration(waiting_time,waiting_time);
		odefault___AuthLoadBalancer_0_c4_large_5.connectInstance(odefault___Auth_0_c4_xlarge_1);
		odefault___ViewProfileLoadBalancer_0_c4_large_0.connectInstance(odefault___ViewProfile_0_c4_xlarge_0);
		odefault___GetRewardMilesLoadBalancer_0_c4_large_6.connectInstance(odefault___GetRewardMiles_0_c4_4xlarge_0);
		odefault___QueryFlightsLoadBalancer_0_c4_large_9.connectInstance(odefault___QueryFlights_0_c4_4xlarge_0);
		odefault___UpdateMilesLoadBalancer_0_c4_large_7.connectInstance(odefault___UpdateMiles_0_c4_4xlarge_0);
		odefault___ValidateIdLoadBalancer_0_c4_large_8.connectInstance(odefault___ValidateId_0_c4_large_2);
		odefault___CancelBookingLoadBalancer_0_c4_large_3.connectInstance(odefault___CancelBooking_0_c4_2xlarge_0);
		odefault___BookFlightsLoadBalancer_0_c4_large_4.connectInstance(odefault___BookFlights_0_c4_2xlarge_0);
		odefault___UpdateProfileLoadBalancer_0_c4_large_1.connectInstance(odefault___UpdateProfile_0_c4_2xlarge_0);
	}

	Unit undeploy_aux() {
		UpdateMilesLoadBalancerInterface odefault___UpdateMilesLoadBalancer_0_c4_large_7 = nth(ls_UpdateMilesLoadBalancerInterface,0);
		CancelBookingLoadBalancerInterface odefault___CancelBookingLoadBalancer_0_c4_large_3 = nth(ls_CancelBookingLoadBalancerInterface,0);
		GetRewardMilesLoadBalancerInterface odefault___GetRewardMilesLoadBalancer_0_c4_large_6 = nth(ls_GetRewardMilesLoadBalancerInterface,0);
		BookFlightsLoadBalancerInterface odefault___BookFlightsLoadBalancer_0_c4_large_4 = nth(ls_BookFlightsLoadBalancerInterface,0);
		UpdateProfileLoadBalancerInterface odefault___UpdateProfileLoadBalancer_0_c4_large_1 = nth(ls_UpdateProfileLoadBalancerInterface,0);
		ValidateIdLoadBalancerInterface odefault___ValidateIdLoadBalancer_0_c4_large_8 = nth(ls_ValidateIdLoadBalancerInterface,0);
		QueryFlightsLoadBalancerInterface odefault___QueryFlightsLoadBalancer_0_c4_large_9 = nth(ls_QueryFlightsLoadBalancerInterface,0);
		ViewProfileLoadBalancerInterface odefault___ViewProfileLoadBalancer_0_c4_large_0 = nth(ls_ViewProfileLoadBalancerInterface,0);
		AuthLoadBalancerInterface odefault___AuthLoadBalancer_0_c4_large_5 = nth(ls_AuthLoadBalancerInterface,0);
		UpdateProfileInterface odefault___UpdateProfile_0_c4_2xlarge_0 = nth(ls_UpdateProfileInterface,0);
		CancelBookingInterface odefault___CancelBooking_0_c4_2xlarge_0 = nth(ls_CancelBookingInterface,0);
		ValidateIdInterface odefault___ValidateId_0_c4_large_2 = nth(ls_ValidateIdInterface,0);
		UpdateMilesInterface odefault___UpdateMiles_0_c4_4xlarge_0 = nth(ls_UpdateMilesInterface,0);
		QueryFlightsInterface odefault___QueryFlights_0_c4_4xlarge_0 = nth(ls_QueryFlightsInterface,0);
		BookFlightsInterface odefault___BookFlights_0_c4_2xlarge_0 = nth(ls_BookFlightsInterface,0);
		AuthInterface odefault___Auth_0_c4_xlarge_1 = nth(ls_AuthInterface,0);
		GetRewardMilesInterface odefault___GetRewardMiles_0_c4_4xlarge_0 = nth(ls_GetRewardMilesInterface,0);
		ViewProfileInterface odefault___ViewProfile_0_c4_xlarge_0 = nth(ls_ViewProfileInterface,0);
		odefault___AuthLoadBalancer_0_c4_large_5.disconnectInstance();
		odefault___ViewProfileLoadBalancer_0_c4_large_0.disconnectInstance();
		odefault___GetRewardMilesLoadBalancer_0_c4_large_6.disconnectInstance();
		odefault___QueryFlightsLoadBalancer_0_c4_large_9.disconnectInstance();
		odefault___UpdateMilesLoadBalancer_0_c4_large_7.disconnectInstance();
		odefault___ValidateIdLoadBalancer_0_c4_large_8.disconnectInstance();
		odefault___CancelBookingLoadBalancer_0_c4_large_3.disconnectInstance();
		odefault___BookFlightsLoadBalancer_0_c4_large_4.disconnectInstance();
		odefault___UpdateProfileLoadBalancer_0_c4_large_1.disconnectInstance();
		while ( !isEmpty(ls_DeploymentComponent) ) {
			cloudProvider.shutdownInstance(head(ls_DeploymentComponent));
			ls_DeploymentComponent = tail(ls_DeploymentComponent);
		}
	}

	Unit patchSpeed(Map<DeploymentComponent,Rat> dcs) {
		foreach(entry in entries(dcs)) {
			DeploymentComponent dc = fst(entry);
			Rat coreUsed = snd(entry);
			InfRat speed_aux = await dc!total(Speed);
			Rat total_speed = case speed_aux {
				Fin(x) => x;
				_ => -1;
			};
			if(total_speed != -1) {
				Rat totalCore = await dc!getNumberOfCores();
				Rat speedPerCore = total_speed / totalCore;
				dc!decrementResources(total_speed - (speedPerCore * coreUsed), Speed);
			}
		}
	}
}
